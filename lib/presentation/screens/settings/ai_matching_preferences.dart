import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:pulse_dating_app/core/theme/app_colors.dart';
import 'package:pulse_dating_app/data/models/premium.dart';

import '../../blocs/premium/premium_bloc.dart';
import '../../blocs/premium/premium_event.dart';
import '../../blocs/premium/premium_state.dart';
import '../../../core/utils/logger.dart';

/// AI Features preferences with premium/admin controls
class AiMatchingPreferences extends StatefulWidget {
  const AiMatchingPreferences({super.key});

  @override
  State<AiMatchingPreferences> createState() => _AiMatchingPreferencesState();
}

class _AiMatchingPreferencesState extends State<AiMatchingPreferences> {
  final Map<PremiumFeatureType, bool> _aiPreferences = {
    PremiumFeatureType.aiSmartMatching: true,
    PremiumFeatureType.aiCompatibilityAnalysis: false,
    PremiumFeatureType.aiConversationStarters: false,
    PremiumFeatureType.aiProfileOptimization: false,
    PremiumFeatureType.aiBehavioralInsights: false,
  };

  @override
  void initState() {
    super.initState();
    _loadUserPreferences();
  }

  Future<void> _loadUserPreferences() async {
    // Load user's AI feature preferences
    context.read<PremiumBloc>().add(LoadPremiumData());
  }

  Future<void> _updatePreference(PremiumFeatureType feature, bool enabled) async {
    try {
      // Check premium access for this feature
      // Note: Feature access checking would typically be handled in BLoC
      // For now, we'll handle it in the UI state management

      setState(() {
        _aiPreferences[feature] = enabled;
      });

      // Show success feedback
      _showSuccessFeedback(feature, enabled);
      
      AppLogger.debug('Updated AI preference: ${feature.name} = $enabled');
    } catch (e) {
      AppLogger.error('Failed to update AI preference: $e');
      _showPremiumRequiredDialog(feature);
    }
  }

  void _showSuccessFeedback(PremiumFeatureType feature, bool enabled) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          '${_getFeatureName(feature)} ${enabled ? 'enabled' : 'disabled'}',
        ),
        backgroundColor: enabled ? AppColors.success : AppColors.textSecondary,
        duration: const Duration(seconds: 2),
      ),
    );
  }

  void _showPremiumRequiredDialog(PremiumFeatureType feature) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Premium Feature Required'),
        content: Text(
          '${_getFeatureName(feature)} requires a premium subscription to use.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              // Navigate to premium upgrade screen
              context.push('/premium-upgrade');
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: AppColors.primary,
            ),
            child: const Text('Upgrade Now'),
          ),
        ],
      ),
    );
  }

  String _getFeatureName(PremiumFeatureType feature) {
    switch (feature) {
      case PremiumFeatureType.aiSmartMatching:
        return 'AI Smart Matching';
      case PremiumFeatureType.aiCompatibilityAnalysis:
        return 'Compatibility Analysis';
      case PremiumFeatureType.aiConversationStarters:
        return 'Conversation Starters';
      case PremiumFeatureType.aiProfileOptimization:
        return 'Profile Optimization';
      case PremiumFeatureType.aiBehavioralInsights:
        return 'Behavioral Insights';
      default:
        return feature.toString();
    }
  }

  String _getFeatureDescription(PremiumFeatureType feature) {
    switch (feature) {
      case PremiumFeatureType.aiSmartMatching:
        return 'AI-powered match suggestions based on deep compatibility analysis';
      case PremiumFeatureType.aiCompatibilityAnalysis:
        return 'Detailed compatibility scores and relationship insights';
      case PremiumFeatureType.aiConversationStarters:
        return 'Personalized ice breakers generated by AI';
      case PremiumFeatureType.aiProfileOptimization:
        return 'AI suggestions to improve your profile effectiveness';
      case PremiumFeatureType.aiBehavioralInsights:
        return 'Learn from your dating patterns with machine learning';
      default:
        return 'Advanced AI feature';
    }
  }

  bool _isFeaturePremium(PremiumFeatureType feature) {
    return feature != PremiumFeatureType.aiProfileOptimization; // Profile optimization is free
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.background,
      appBar: AppBar(
        title: const Text(
          'AI Matching Settings',
          style: TextStyle(
            fontWeight: FontWeight.w600,
            color: AppColors.textPrimary,
          ),
        ),
        backgroundColor: AppColors.surface,
        elevation: 0,
        iconTheme: const IconThemeData(color: AppColors.textPrimary),
      ),
      body: BlocConsumer<PremiumBloc, PremiumState>(
        listener: (context, state) {
          if (state is PremiumError) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text(state.message),
                backgroundColor: AppColors.error,
              ),
            );
          } else if (state is PremiumError) {
            // Handle premium access error
            debugPrint('Premium access error: ${state.message}');
          }
        },
        builder: (context, premiumState) {
          return SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Header
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [AppColors.primary, AppColors.accent],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                    borderRadius: BorderRadius.circular(16),
                  ),
                  child: const Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(
                            Icons.psychology,
                            color: Colors.white,
                            size: 28,
                          ),
                          SizedBox(width: 12),
                          Text(
                            'AI-Powered Dating',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 20,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 8),
                      Text(
                        'Enhance your dating experience with advanced AI features',
                        style: TextStyle(
                          color: Colors.white70,
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 24),

                // Feature List
                ..._aiPreferences.keys.map((feature) => _buildFeatureCard(
                      feature,
                      premiumState is PremiumLoaded && premiumState.subscription?.status == SubscriptionStatus.active,
                    )),

                const SizedBox(height: 24),

                // Info Card
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: AppColors.surface,
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: AppColors.border),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Row(
                        children: [
                          Icon(
                            Icons.info_outline,
                            color: AppColors.primary,
                            size: 20,
                          ),
                          SizedBox(width: 8),
                          Text(
                            'About AI Features',
                            style: TextStyle(
                              fontWeight: FontWeight.w600,
                              color: AppColors.textPrimary,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'AI features use machine learning to improve your dating experience. '
                        'Premium features require an active subscription and may have usage limits.',
                        style: TextStyle(
                          color: AppColors.textSecondary,
                          fontSize: 12,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildFeatureCard(PremiumFeatureType feature, bool hasPremiumAccess) {
    final isEnabled = _aiPreferences[feature] ?? false;
    final isPremium = _isFeaturePremium(feature);
    final canToggle = !isPremium || hasPremiumAccess;

    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
        color: AppColors.surface,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isEnabled ? AppColors.primary.withValues(alpha: 0.3) : AppColors.border,
        ),
      ),
      child: ListTile(
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        leading: Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: AppColors.primary.withValues(alpha: 0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(
            _getFeatureIcon(feature),
            color: AppColors.primary,
            size: 20,
          ),
        ),
        title: Row(
          children: [
            Expanded(
              child: Text(
                _getFeatureName(feature),
                style: const TextStyle(
                  fontWeight: FontWeight.w600,
                  color: AppColors.textPrimary,
                ),
              ),
            ),
            if (isPremium) ...[
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                decoration: BoxDecoration(
                  color: AppColors.primary,
                  borderRadius: BorderRadius.circular(6),
                ),
                child: const Text(
                  'PREMIUM',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 10,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ],
        ),
        subtitle: Padding(
          padding: const EdgeInsets.only(top: 4),
          child: Text(
            _getFeatureDescription(feature),
            style: TextStyle(
              color: AppColors.textSecondary,
              fontSize: 12,
            ),
          ),
        ),
        trailing: Switch(
          value: isEnabled && canToggle,
          onChanged: canToggle
              ? (value) => _updatePreference(feature, value)
              : null,
          activeThumbColor: AppColors.primary,
        ),
      ),
    );
  }

  IconData _getFeatureIcon(PremiumFeatureType feature) {
    switch (feature) {
      case PremiumFeatureType.aiSmartMatching:
        return Icons.psychology;
      case PremiumFeatureType.aiCompatibilityAnalysis:
        return Icons.favorite_border;
      case PremiumFeatureType.aiConversationStarters:
        return Icons.chat_bubble_outline;
      case PremiumFeatureType.aiProfileOptimization:
        return Icons.tune;
      case PremiumFeatureType.aiBehavioralInsights:
        return Icons.insights;
      default:
        return Icons.smart_toy;
    }
  }
}