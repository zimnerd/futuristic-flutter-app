import 'dart:async';
import 'dart:convert';

import 'package:pulse_dating_app/data/models/ai_onboarding_models.dart';
import 'package:pulse_dating_app/domain/entities/user_profile.dart';
import 'package:pulse_dating_app/domain/services/api_service.dart';
import 'package:pulse_dating_app/core/services/service_locator.dart';

/// AI-Assisted Onboarding Service - provides backend-driven personalized onboarding
/// ALL questions and profile content are generated by backend AI/LLM
/// User must confirm every AI-generated profile section
class AiOnboardingService {
  static AiOnboardingService? _instance;
  static AiOnboardingService get instance => 
      _instance ??= AiOnboardingService._();
  AiOnboardingService._();

  // TODO: Replace with actual API service injection when dependencies are resolved
  // final ApiService _apiService = ServiceLocator.instance.get<ApiService>();

  /// Start AI-assisted onboarding session
  Future<AiOnboardingResponse?> startOnboardingSession({
    required String userId,
    Map<String, dynamic>? initialData,
  }) async {
    try {
      final sessionId = _generateSessionId();
      
      final request = AiOnboardingRequest(
        userId: userId,
        sessionId: sessionId,
        step: const AiOnboardingStep(
          stepId: 'welcome',
          category: 'personality',
          stepNumber: 1,
          totalSteps: 8, // Dynamic based on AI analysis
        ),
        responses: initialData ?? {},
        context: 'onboarding_start',
      );

      // TODO: Implement actual API call when dependencies are available
      /*
      final response = await _apiService.post(
        '/ai/onboarding/start',
        body: request.toJson(),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return AiOnboardingResponse.fromJson(data);
      }
      */

      // Return mock response for now - replace with actual API call
      return _createMockOnboardingResponse(sessionId, request.step);
    } catch (e) {
      print('Error starting onboarding session: $e');
      return null;
    }
  }

  /// Get next onboarding questions based on previous responses
  Future<AiOnboardingResponse?> getNextQuestions({
    required String sessionId,
    required String userId,
    required Map<String, dynamic> responses,
    required AiOnboardingStep currentStep,
  }) async {
    try {
      final nextStep = _calculateNextStep(currentStep);
      
      final request = AiOnboardingRequest(
        userId: userId,
        sessionId: sessionId,
        step: nextStep,
        responses: responses,
        context: 'get_next_questions',
      );

      // TODO: Implement actual API call when dependencies are available
      /*
      final response = await _apiService.post(
        '/ai/onboarding/next',
        body: request.toJson(),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return AiOnboardingResponse.fromJson(data);
      }
      */

      // Return mock response for now - replace with actual API call
      return _createMockOnboardingResponse(sessionId, nextStep);
    } catch (e) {
      print('Error getting next questions: $e');
      return null;
    }
  }

  /// Generate profile section based on user responses (requires user confirmation)
  Future<AiGeneratedProfileSection?> generateProfileSection({
    required String sessionId,
    required String userId,
    required String sectionType, // 'bio', 'interests', 'lifestyle'
    required Map<String, dynamic> userResponses,
  }) async {
    try {
      final request = {
        'sessionId': sessionId,
        'userId': userId,
        'sectionType': sectionType,
        'responses': userResponses,
        'context': {
          'platform': 'mobile',
          'generation_type': 'profile_section',
          'requires_confirmation': true,
        },
      };

      // TODO: Implement actual API call when dependencies are available
      /*
      final response = await _apiService.post(
        '/ai/onboarding/generate-section',
        body: request,
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return AiGeneratedProfileSection.fromJson(data);
      }
      */

      // Return mock generated section for now
      return _createMockGeneratedSection(sectionType, userResponses);
    } catch (e) {
      print('Error generating profile section: $e');
      return null;
    }
  }

  /// Confirm and finalize generated profile section
  Future<bool> confirmProfileSection({
    required String sessionId,
    required String userId,
    required String sectionId,
    required bool isApproved,
    String? userModifications,
    String? feedback,
  }) async {
    try {
      final request = {
        'sessionId': sessionId,
        'userId': userId,
        'sectionId': sectionId,
        'isApproved': isApproved,
        'userModifications': userModifications,
        'feedback': feedback,
        'timestamp': DateTime.now().toIso8601String(),
      };

      // TODO: Implement actual API call when dependencies are available
      /*
      final response = await _apiService.post(
        '/ai/onboarding/confirm-section',
        body: request,
      );

      return response.statusCode == 200;
      */

      // Mock success for now
      print('Profile section ${isApproved ? 'approved' : 'rejected'}: $sectionId');
      return true;
    } catch (e) {
      print('Error confirming profile section: $e');
      return false;
    }
  }

  /// Get onboarding progress and insights
  Future<AiOnboardingProgress?> getOnboardingProgress({
    required String sessionId,
    required String userId,
  }) async {
    try {
      final request = {
        'sessionId': sessionId,
        'userId': userId,
        'requestType': 'progress',
      };

      // TODO: Implement actual API call when dependencies are available
      /*
      final response = await _apiService.get(
        '/ai/onboarding/progress',
        queryParameters: request,
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return AiOnboardingProgress.fromJson(data);
      }
      */

      // Return mock progress for now
      return _createMockProgress();
    } catch (e) {
      print('Error getting onboarding progress: $e');
      return null;
    }
  }

  /// Complete onboarding and generate final profile
  Future<Map<String, dynamic>?> completeOnboarding({
    required String sessionId,
    required String userId,
    required Map<String, dynamic> allResponses,
    required List<String> confirmedSections,
  }) async {
    try {
      final request = {
        'sessionId': sessionId,
        'userId': userId,
        'allResponses': allResponses,
        'confirmedSections': confirmedSections,
        'completionTime': DateTime.now().toIso8601String(),
      };

      // TODO: Implement actual API call when dependencies are available
      /*
      final response = await _apiService.post(
        '/ai/onboarding/complete',
        body: request,
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return data['finalProfile'];
      }
      */

      // Return mock final profile for now
      return {
        'profileComplete': true,
        'aiConfidence': 0.85,
        'recommendations': [
          'Add more diverse photos',
          'Consider expanding interests section',
        ],
      };
    } catch (e) {
      print('Error completing onboarding: $e');
      return null;
    }
  }

  /// Submit feedback for onboarding experience
  Future<bool> submitOnboardingFeedback({
    required String sessionId,
    required String userId,
    required int overallRating,
    required int aiHelpfulness,
    required int profileAccuracy,
    String? comment,
    List<String>? improvementSuggestions,
  }) async {
    try {
      final request = {
        'sessionId': sessionId,
        'userId': userId,
        'featureType': 'ai_onboarding',
        'rating': {
          'overall': overallRating,
          'helpfulness': aiHelpfulness,
          'accuracy': profileAccuracy,
          'wouldRecommend': overallRating >= 4,
        },
        'comment': comment,
        'improvementSuggestions': improvementSuggestions,
        'timestamp': DateTime.now().toIso8601String(),
      };

      // TODO: Implement actual API call when dependencies are available
      /*
      final response = await _apiService.post(
        '/ai/feedback',
        body: request,
      );

      return response.statusCode == 200;
      */

      // Mock success for now
      print('Onboarding feedback submitted: Overall rating $overallRating');
      return true;
    } catch (e) {
      print('Error submitting onboarding feedback: $e');
      return false;
    }
  }

  // Private helper methods

  String _generateSessionId() {
    return 'onboarding_${DateTime.now().millisecondsSinceEpoch}';
  }

  AiOnboardingStep _calculateNextStep(AiOnboardingStep currentStep) {
    final categories = ['personality', 'interests', 'lifestyle', 'preferences'];
    final currentIndex = categories.indexOf(currentStep.category);
    final nextIndex = (currentIndex + 1) % categories.length;
    
    return AiOnboardingStep(
      stepId: 'step_${currentStep.stepNumber + 1}',
      category: categories[nextIndex],
      stepNumber: currentStep.stepNumber + 1,
      totalSteps: currentStep.totalSteps,
    );
  }

  /// Mock responses for development - replace with actual API calls

  AiOnboardingResponse _createMockOnboardingResponse(
    String sessionId, 
    AiOnboardingStep step,
  ) {
    final questions = _getMockQuestionsForCategory(step.category);
    
    return AiOnboardingResponse(
      sessionId: sessionId,
      currentStep: step,
      questions: questions,
      generatedSection: null,
      progress: AiOnboardingProgress(
        completedSteps: step.stepNumber - 1,
        totalSteps: step.totalSteps,
        completionPercentage: ((step.stepNumber - 1) / step.totalSteps) * 100,
        completedCategories: step.stepNumber > 1 ? ['personality'] : [],
        nextCategory: step.category,
        collectedData: {},
      ),
      isComplete: step.stepNumber >= step.totalSteps,
      generatedAt: DateTime.now(),
    );
  }

  List<AiOnboardingQuestion> _getMockQuestionsForCategory(String category) {
    switch (category) {
      case 'personality':
        return [
          AiOnboardingQuestion(
            id: 'p1',
            question: 'How would your friends describe your personality?',
            type: 'multiple_choice',
            options: ['Outgoing & Social', 'Thoughtful & Introspective', 'Adventurous & Spontaneous', 'Calm & Reliable'],
            category: category,
            reasoning: 'Understanding core personality helps generate authentic bio',
          ),
          AiOnboardingQuestion(
            id: 'p2',
            question: 'What energizes you most?',
            type: 'multiple_choice',
            options: ['Being around people', 'Quiet time alone', 'New experiences', 'Familiar routines'],
            category: category,
            reasoning: 'Energy sources reveal compatibility preferences',
          ),
        ];
      case 'interests':
        return [
          AiOnboardingQuestion(
            id: 'i1',
            question: 'What do you love doing in your free time?',
            type: 'text',
            category: category,
            reasoning: 'Free time activities are great conversation starters',
          ),
          AiOnboardingQuestion(
            id: 'i2',
            question: 'Which activities make you lose track of time?',
            type: 'multiple_choice',
            options: ['Creative pursuits', 'Sports & fitness', 'Reading & learning', 'Social activities', 'Outdoor adventures'],
            category: category,
            reasoning: 'Flow activities indicate deep interests and passions',
          ),
        ];
      case 'lifestyle':
        return [
          AiOnboardingQuestion(
            id: 'l1',
            question: 'What\'s your ideal weekend like?',
            type: 'text',
            category: category,
            reasoning: 'Weekend preferences reveal lifestyle compatibility',
          ),
          AiOnboardingQuestion(
            id: 'l2',
            question: 'How important is health and fitness in your life?',
            type: 'scale',
            constraints: {'min': 1, 'max': 5},
            category: category,
            reasoning: 'Health priorities affect relationship dynamics',
          ),
        ];
      default:
        return [];
    }
  }

  AiGeneratedProfileSection _createMockGeneratedSection(
    String sectionType, 
    Map<String, dynamic> responses,
  ) {
    switch (sectionType) {
      case 'bio':
        return AiGeneratedProfileSection(
          sectionType: sectionType,
          content: "I'm someone who finds energy in both social gatherings and quiet moments of reflection. I love losing myself in creative pursuits and believe that the best weekends combine adventure with relaxation. Health and wellness are important to me, but I also believe in balance and enjoying life's pleasures.",
          reasoning: "Generated based on your personality responses indicating a balanced, thoughtful person who values both social connection and personal growth.",
          confidence: 0.87,
          basedOn: ['personality responses', 'lifestyle preferences'],
          requiresConfirmation: true,
          alternatives: [
            "An outgoing creative who values both adventure and peaceful moments...",
            "I believe in living life with intention and balance...",
          ],
        );
      case 'interests':
        return AiGeneratedProfileSection(
          sectionType: sectionType,
          content: "Creative writing, hiking, fitness, reading psychology books, cooking new recipes, photography",
          reasoning: "Selected interests that align with your responses about creative pursuits, outdoor activities, and personal growth.",
          confidence: 0.92,
          basedOn: ['free time activities', 'flow state activities'],
          requiresConfirmation: true,
        );
      default:
        return AiGeneratedProfileSection(
          sectionType: sectionType,
          content: "Content based on your responses...",
          reasoning: "Generated from your personalized answers",
          confidence: 0.8,
          basedOn: ['user responses'],
          requiresConfirmation: true,
        );
    }
  }

  AiOnboardingProgress _createMockProgress() {
    return const AiOnboardingProgress(
      completedSteps: 3,
      totalSteps: 8,
      completionPercentage: 37.5,
      completedCategories: ['personality', 'interests'],
      nextCategory: 'lifestyle',
      collectedData: {
        'personality_type': 'balanced_social',
        'energy_source': 'mixed',
        'interests_count': 6,
        'bio_generated': true,
      },
    );
  }
}