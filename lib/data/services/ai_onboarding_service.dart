import 'dart:async';

import 'package:dio/dio.dart';
import 'package:logger/logger.dart';
import 'package:pulse_dating_app/data/models/ai_onboarding_models.dart';

/// AI-Assisted Onboarding Service - provides backend-driven personalized onboarding
/// ALL questions and profile content are generated by backend AI/LLM
/// User must confirm every AI-generated profile section
class AiOnboardingService {
  final Dio _dio;
  final Logger _logger;

  AiOnboardingService({required Dio dio, required Logger logger})
    : _dio = dio,
      _logger = logger;

  /// Start AI-assisted onboarding session
  Future<AiOnboardingResponse?> startOnboardingSession({
    required String userId,
    Map<String, dynamic>? initialData,
  }) async {
    try {
      final data = {
        'userId': userId,
        'initialData': initialData ?? {},
      };

      final response = await _dio.post('/ai-onboarding/start', data: data,
      );

      if (response.statusCode == 200 && response.data != null) {
        return AiOnboardingResponse.fromJson(response.data);
      }
      
      return null;
    } catch (e) {
      _logger.e('Error starting onboarding session: $e');
      return null;
    }
  }

  /// Get next onboarding questions based on previous responses
  Future<AiOnboardingResponse?> getNextQuestions({
    required String sessionId,
    required String userId,
    required Map<String, dynamic> responses,
    required AiOnboardingStep currentStep,
  }) async {
    try {
      final data = {
        'sessionId': sessionId,
        'userId': userId,
        'responses': responses,
        'currentStep': {
          'stepId': currentStep.stepId,
          'category': currentStep.category,
          'stepNumber': currentStep.stepNumber,
          'totalSteps': currentStep.totalSteps,
        },
      };

      final response = await _dio.post('/ai-onboarding/next', data: data,
      );

      if (response.statusCode == 200 && response.data != null) {
        return AiOnboardingResponse.fromJson(response.data);
      }
      
      return null;
    } catch (e) {
      _logger.e('Error getting next questions: $e');
      return null;
    }
  }

  /// Generate profile section based on user responses (requires user confirmation)
  Future<AiGeneratedProfileSection?> generateProfileSection({
    required String sessionId,
    required String userId,
    required String sectionType, // 'bio', 'interests', 'lifestyle'
    required Map<String, dynamic> userResponses,
  }) async {
    try {
      final data = {
        'sessionId': sessionId,
        'userId': userId,
        'sectionType': sectionType,
        'responses': userResponses,
        'context': {
          'platform': 'mobile',
          'generation_type': 'profile_section',
          'requires_confirmation': true,
        },
      };

      final response = await _dio.post(
        '/ai-onboarding/generate-section',
        data: data,
      );

      if (response.statusCode == 200 && response.data != null) {
        return AiGeneratedProfileSection.fromJson(response.data);
      }
      
      return null;

    } catch (e) {
      _logger.e('Error generating profile section: $e');
      return null;
    }
  }

  /// Confirm and finalize generated profile section
  Future<bool> confirmProfileSection({
    required String sessionId,
    required String userId,
    required String sectionId,
    required bool isApproved,
    String? userModifications,
    String? feedback,
  }) async {
    try {
      final data = {
        'sessionId': sessionId,
        'userId': userId,
        'sectionId': sectionId,
        'isApproved': isApproved,
        'userModifications': userModifications,
        'feedback': feedback,
        'timestamp': DateTime.now().toIso8601String(),
      };

      final response = await _dio.post(
        '/ai-onboarding/confirm-section',
        data: data,
      );

      return response.statusCode == 200;
    } catch (e) {
      _logger.e('Error confirming profile section: $e');
      return false;
    }
  }

  /// Get onboarding progress and insights
  Future<AiOnboardingProgress?> getOnboardingProgress({
    required String sessionId,
    required String userId,
  }) async {
    try {
      final data = {
        'sessionId': sessionId,
        'userId': userId,
      };

      final response = await _dio.get(
        '/ai-onboarding/progress',
        queryParameters: data,
      );

      if (response.statusCode == 200 && response.data != null) {
        return AiOnboardingProgress.fromJson(response.data);
      }
      
      return null;
    } catch (e) {
      _logger.e('Error getting onboarding progress: $e');
      return null;
    }
  }

  /// Complete onboarding and generate final profile
  Future<Map<String, dynamic>?> completeOnboarding({
    required String sessionId,
    required String userId,
    required Map<String, dynamic> allResponses,
    required List<String> confirmedSections,
  }) async {
    try {
      final data = {
        'sessionId': sessionId,
        'userId': userId,
        'allResponses': allResponses,
        'confirmedSections': confirmedSections,
        'completionTime': DateTime.now().toIso8601String(),
      };

      final response = await _dio.post('/ai-onboarding/complete', data: data,
      );

      if (response.statusCode == 200 && response.data != null) {
        return response.data['finalProfile'];
      }
      
      return null;
    } catch (e) {
      _logger.e('Error completing onboarding: $e');
      return null;
    }
  }

  /// Submit feedback for onboarding experience
  Future<bool> submitOnboardingFeedback({
    required String sessionId,
    required String userId,
    required int overallRating,
    required int aiHelpfulness,
    required int profileAccuracy,
    String? comment,
    List<String>? improvementSuggestions,
  }) async {
    try {
      final data = {
        'sessionId': sessionId,
        'userId': userId,
        'featureType': 'ai_onboarding',
        'rating': {
          'overall': overallRating,
          'helpfulness': aiHelpfulness,
          'accuracy': profileAccuracy,
          'wouldRecommend': overallRating >= 4,
        },
        'comment': comment,
        'improvementSuggestions': improvementSuggestions,
        'timestamp': DateTime.now().toIso8601String(),
      };

      final response = await _dio.post(
        '/ai/feedback',
        data: data,
      );

      return response.statusCode == 200;
    } catch (e) {
      _logger.e('Error submitting onboarding feedback: $e');
      return false;
    }
  }
}